---
import { Image } from "@astrojs/image/components";
import listItemImg1 from "../assets/img/list-item-safe.png";
import listItemImg2 from "../assets/img/list-item2.png";
import listItemImg3 from "../assets/img/list-item3.png";
import listItemImg4 from "../assets/img/list-item4.png";
import listItemImg5 from "../assets/img/list-item5.png";
import listItemImg6 from "../assets/img/list-item6.png";

let activeIndex = 0;
const listItems = [
// {
//   label: "Настраивать кресло водителя под себя",
//  img: listItemImg1,
// text: "Правильная посадка поможет быстро вращать руль, полностью выжимать педали и меньше травмироваться в ДТП",
// },
  {
    label: "Эффективно тормозить и выбирать скорость",
    imgUrl: listItemImg2,
    text: "Как скорость влияет на тормозной путь, как быстрее всего остановиться и что происходит при неправильном торможении",
  },
  {
    label: "Выводить машину из заноса",
    imgUrl: listItemImg3,
    text: "Узнаешь, как избежать сноса и заноса и что делать, если машина все-таки вышла из‑под контроля",
  },
  {
    label: "Объезжать неожиданные препятствия",
    imgUrl: listItemImg4,
    text: "Боишься сбить пешехода на темной улице? Отработай безопасный объезд без снижения скорости",
  },
  {
    label: "Водить по-настоящему",
    imgUrl: listItemImg5,
    text: "Ты сможешь лучше маневрировать, чувствовать габариты авто и быстрее принимать решения",
  },
  {
    label: "Использовать управляемый занос",
    imgUrl: listItemImg6,
    text: "Освой азы вождения на Polo — или сразу приходи на занятие по дрифту. Наши турбольвицы BMW M2 уже ждут тебя!",
  }
  // {
  //   label: "Использовать управляемый занос для поворота",
  //   imgUrl: "img/list-item.jpg",
  //   text: "Слева можно выбирать пункты, а здесь появляется поясняющий текст. Нужна анимация выделения. Длина — условные 120 символов.",
  // },
];
---

<section class="learn-list-section">
  <h2 class="learn-list-section__title">Мы покажем, как:</h2>
  <div class="learn-list-wrapper">
    <div class="learn-list">
      {
        listItems.map((item, index) => (
          <div class="learn-list-item">
            <div class="learn-list-item__content">
              <svg
                class="icon-wrapper"
                viewBox="0 0 106 57"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M.673 55.947 17.372.5h87.961L89.125 55.947H.673Z"
                  class="item-box"
                  stroke="#DB3549"
                />
                <path
                  d="M32 24.5 48.5 41l26-26"
                  class="item-check"
                  stroke-width="5"
                />
              </svg>{" "}
              <span class="item-label">{item.label}</span>
            </div>
            <div class="learn-list-card">
              <img src={item?.imgUrl?.src || listItemImg1.src} width={460} height={207} alt={item.text} />
              <p class="learn-list-card__text">{item.text}</p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .learn-list-section {
    padding: var(--container-padding);
    padding-top: 90px;
    padding-bottom: 90px;
  }
  .learn-list {
    position: relative;
  }
  .learn-list-section__title {
    font-style: italic;
    font-weight: 700;
    font-size: 45px;
    line-height: 50px;
    text-align: center;
    text-transform: uppercase;
    margin-bottom: 55px;
  }
  .learn-list-wrapper {
    /* position: relative;; */
  }
  @media(min-width: 1024px) {
    .learn-list-card {
      visibility: hidden;
      opacity: 0;
      position: absolute;
      top: 0;
      right: 0;
      width: 460px;
      transition: all 0.3s ease-in-out;
  }
  }
  .learn-list-item {
    /* position: relative; */
    padding-right: 480px;
  }
  .learn-list-item__content {
    display: flex;
    align-items: center;
    padding: 24px;
    border-top: 1px solid var(--color-contrast-low);
    margin-top: 1px;
    transition: all 0.3s ease-in-out;
  }
  .learn-list-item__content > svg {
    flex-shrink: 0;
  }
  .learn-list-item:last-child > .learn-list-item__content {
    border-bottom: 1px solid var(--color-contrast-low);
  }
  .item-label {
    margin-left: 20px;
    font-weight: 400;
    font-size: 22px;
    line-height: 28px;
    color: #828282;
    transition: all 0.3s ease-in-out;
  }
  .active .item-label {
    color: var(--color-accent);
  }
  .icon-wrapper {
    width: 106px;
  }
  .item-box {
    fill: transparent;
    transition: all 0.3s ease-in-out;
  }
  .active .item-box {
    fill: var(--color-accent);
  }
  .item-check {
    stroke: #e3e3e3;
    transition: all 0.3s ease-in-out;
  }
  .active .item-check {
    stroke: #fff;
  }
  .active.learn-list-item > .learn-list-item__content {
    border-top-color: var(--color-accent);
  }
  .active + .learn-list-item > .learn-list-item__content {
    border-top-color: var(--color-accent);
  }
  .active.learn-list-item:last-child > .learn-list-item__content {
    border-bottom-color: var(--color-accent);
  }
  .active > .learn-list-card {
    opacity: 1;
    visibility: visible;
  }
  .learn-list-card__text {
    display: block;
    background-color: #46a5ff;
    padding: 40px 30px 50px;
    color: var(--color-contrast);
  }
  @media (max-width: 1023px) {
    .learn-list-section__title {
      font-size: 35px;
      line-height: 39px;
      text-align: center;
      text-transform: uppercase;
    }
    .learn-list-section {
      padding: 90px 40px;
    }
    .learn-list-item {
      position: relative;
      padding-right: 0;
    }
    .icon-wrapper {
      width: 81px;
      height: 32px;
    }
    .item-label {
      font-style: normal;
      font-weight: 400;
      font-size: 16px;
      line-height: 20px;
    }
    .learn-list-card {
      padding: 10px;
      /* visibility: hidden;
      overflow: hidden;
      opacity: 0; */
      filter: grayscale(1);
      width: 100%;
      transition: all .3s ease-in-out;
    }
    .learn-list-card > img {
      width: 100%;
      object-fit: cover;
    }
    .active > .learn-list-card {
      filter: grayscale(0);
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);
  const mm = gsap.matchMedia();
  const learnList: HTMLElement = document.querySelector(".learn-list-section");
  const items = gsap.utils.toArray(".learn-list-item");
  mm.add("(min-width: 1024px)", () => {
    gsap.to(learnList, {
      scrollTrigger: {
        scrub: 0.5,
        trigger: learnList,
        pin: learnList,
        start: "center center",
        end: `bottom-=95 top`,
      },
    });
    items.forEach((item: HTMLElement) => {
    ScrollTrigger.create({
      trigger: item,
      start: "top center-=" + 200,
      end: "bottom center-=" + 200,
      onEnterBack: () => {
        item.classList.add("active");
      },
      onEnter: () => {
        item.classList.add("active");
      },
      onLeave: () => {
        item.classList.remove("active");
      },
      onLeaveBack: () => {
        item.classList.remove("active");
      },
    });
  });
  });
  mm.add("(max-width: 1023px)", () => {
    items.forEach((item: HTMLElement) => {
    ScrollTrigger.create({
      trigger: item,
      start: "top top+=100",
      end: "bottom top+=100",
      onEnterBack: () => {
        item.classList.add("active");
      },
      onEnter: () => {
        item.classList.add("active");
      },
      onLeave: () => {
        item.classList.remove("active");
      },
      onLeaveBack: () => {
        item.classList.remove("active");
      },
    });
  });
  });
</script>

